@model WhiteAura.Models.User

@{

    var userId = Session["UserID"] as int?;
}


<style>
    /* Custom styles for white theme with black font */
    body {
        background-color: #fff;
        color: #000;
    }

    .header,
    .footer,
    .packages_box,
    .about_text {
        background-color: #fff;
        color: #000;
    }

    a {
        color: #000;
        text-decoration: none;
    }

        a:hover {
            color: #0056b3;
        }

    .read_more {
        background: #000;
        color: #fff;
        padding: 10px 15px;
        border-radius: 5px;
        transition: background 0.3s;
    }

        .read_more:hover {
            background: #fff;
            color: #000;
        }

    .contactus {
        background-color: #fff;
        color: #000;
        border: 1px solid #000;
        padding: 10px;
        border-radius: 5px;
    }

    .send_btn {
        background-color: #000;
        color: #fff;
        border: none;
        padding: 10px 15px;
        border-radius: 5px;
    }

        .send_btn:hover {
            background-color: #fff;
            color: #000;
        }

    .titlepage h3 {
        color: #000;
    }

    label {
        color: #000;
        font-weight: bold;
    }

    select.contactus,
    input.contactus {
        color: #000;
        background-color: #fff;
        border: 1px solid #000;
        padding: 10px;
        border-radius: 5px;
    }

    .titlepage h2::before {
        background: #333;
    }

    .about_text.text_align_center {
        background: rgba(92, 90, 90, 0.1);
        backdrop-filter: blur(10px);
        color: #000;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .pricing .btn-primary {
        background-color: #000;
        border-color: #000;
        color: #fff;
        padding: 10px 15px;
    }

        .pricing .btn-primary:hover {
            background-color: #fff;
            color: #000;
            border-color: #000;
        }

    .pricing .display-3 {
        color: #000;
        font-weight: bold;
    }

    .pricing .list-group-item svg {
        fill: #000;
    }

    .pricing .list-group-item .text-danger {
        fill: #000;
    }

    .our_packages {
        border-top: rgba(255, 255, 255, 0.15) solid 125px;
    }

    .header-content {
        position: relative;
        width: 100%;
        height: 50vh;
        overflow: hidden;
    }

        .header-content img.header-image {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .header-form {
        position: absolute;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        background-color: rgba(255, 255, 255, 0.8);
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    header {
        position: relative;
        height: 50vh !important;
        overflow: hidden;
        background-color: #fff;
    }

    .profile-header {
        text-align: center;
        margin-bottom: 20px;
    }

    .profile-img {
        width: 150px;
        height: 150px;
        border-radius: 50%;
    }

    .profile-details ul {
        list-style-type: none;
        padding: 0;
    }

        .profile-details ul li {
            margin-bottom: 10px;
        }

    .btn-primary {
        background-color: #000;
        border-color: #000;
        padding: 10px 15px;
    }

        .btn-primary:hover {
            background-color: #fff;
            color: #000;
            border-color: #000;
        }

    .modal-header {
        border-bottom: 1px solid #ddd;
    }

    .modal-body {
        padding: 20px;
    }

    .nav-tabs-bordered {
        border-bottom: 1px solid #ddd;
    }

        .nav-tabs-bordered .nav-link {
            border: none;
            border-radius: 0;
            margin: 0;
            padding: 10px;
            transition: background 0.3s;
        }

            .nav-tabs-bordered .nav-link.active {
                border-bottom: 2px solid #000;
                color: #000;
            }

            .nav-tabs-bordered .nav-link:hover {
                background: rgba(0, 0, 0, 0.1);
            }

    .tab-content {
        padding: 20px;
        border: 1px solid #ddd;
        border-top: none;
        border-radius: 5px;
    }

    img.header-image {
        z-index: -1;
    }
</style>

<style>
    /* Custom styles for white theme with black font */
    body {
        background-color: #fff;
        color: #000;
    }

    .header,
    .footer,
    .packages_box,
    .about_text {
        background-color: #fff;
        color: #000;
    }

    a {
        color: #000;
    }

        a:hover {
            color: #000;
        }

    .read_more {
        background: #000;
        color: #fff;
    }

        .read_more:hover {
            background: #fff;
            color: #000;
        }

    .contactus {
        background-color: #fff;
        color: #000;
        border: 1px solid #000;
    }

    .send_btn {
        background-color: #000;
        color: #fff;
        border: none;
    }

        .send_btn:hover {
            background-color: #fff;
            color: #000;
        }

    .titlepage h3 {
        color: #000;
    }

    label {
        color: #000;
    }

    select.contactus,
    input.contactus {
        color: #000;
        background-color: #fff;
        border: 1px solid #000;
    }

    .titlepage h2::before {
        background: #333;
    }

    .about_text.text_align_center {
        background: rgba(92, 90, 90, 0.1);
        backdrop-filter: blur(10px);
        color: #000;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .pricing .btn-primary {
        background-color: #000;
        border-color: #000;
        color: #fff;
    }

        .pricing .btn-primary:hover {
            background-color: #fff;
            color: #000;
            border-color: #000;
        }

    .pricing .display-3 {
        color: #000;
        font-weight: bold;
    }

    .pricing .list-group-item svg {
        fill: #000;
    }

    .pricing .list-group-item .text-danger {
        fill: #000;
    }

    .our_packages {
        border-top: rgba(255, 255, 255, 0.15) solid 125px;
    }

    /* Ensure the header image covers the entire header */
    .header-content {
        position: relative;
        width: 100%;
        height: 100vh; /* Full viewport height */
        overflow: hidden;
    }

        .header-content img.header-image {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover; /* Ensures the image covers the container */
        }

    .header-form {
        position: absolute;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        background-color: rgba(255, 255, 255, 0.8);
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    header {
        position: relative;
        height: 50vh !important; /* Increase header height */
        overflow: hidden;
        background-color: #fff;
    }
</style>
<link rel="stylesheet" href="~/Content/css and js/profile.css" />
<link rel="stylesheet" href="~/Content/css and js/venustyle.css" />
@section HeaderContent {
    <div class="header-content">
        <img src="~/Content/pic/booking.jpg" alt="Bride" class="header-image" />
        <div class="about-section">
            <div class="contact-header">
                <h1 style="font-size: 70px; color: white">Profile</h1>
            </div>
        </div>
    </div>
}

<div class="container mt-4">
    <div class="card">
        <div class="card-body pt-3">
            <ul class="nav nav-tabs nav-tabs-bordered">
                <li class="nav-item">
                    <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#profile-overview">Overview</button>
                </li>
                <li class="nav-item">
                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#profile-edit">Edit Profile</button>
                </li>
                <li class="nav-item">
                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#profile-bookings">Booking Info</button>
                </li>
                <li class="nav-item">
                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#profile-change-password">Change Password</button>
                </li>
            </ul>

            <div class="tab-content pt-2">
                <div class="tab-pane fade show active" id="profile-overview">
                    <h5 class="card-title">About</h5>
                    <p class="small fst-italic">@Model.Description</p>
                    <h5 class="card-title">Profile Details</h5>
                    <div class="row">
                        <div class="col-lg-3 col-md-4 label">Full Name</div>
                        <div class="col-lg-9 col-md-8">@Model.FullName</div>
                    </div>
                    <div class="row">
                        <div class="col-lg-3 col-md-4 label">Email</div>
                        <div class="col-lg-9 col-md-8">@Model.Email</div>
                    </div>
                    <div class="row">
                        <div class="col-lg-3 col-md-4 label">Phone</div>
                        <div class="col-lg-9 col-md-8">@Model.PhoneNumber</div>
                    </div>
                </div>

                <div class="tab-pane fade" id="profile-edit">
                    @using (Html.BeginForm("Profile", "LoginandSignup", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, "About")
                            @Html.TextBoxFor(model => model.Description, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Description)
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.FullName)
                            @Html.TextBoxFor(model => model.FullName, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.FullName)
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Email)
                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Email)
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.PhoneNumber)
                            @Html.TextBoxFor(model => model.PhoneNumber, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.PhoneNumber)
                        </div>
                        <button type="submit" class="btn btn-primary">Save</button>
                    }
                </div>

                <div class="tab-pane fade" id="profile-bookings">
                    <h5 class="card-title">Your Bookings</h5>
                    @if (Model.Bookings != null && Model.Bookings.Count > 0)
                    {
                        <ul class="list-group">
                            @foreach (var booking in Model.Bookings)
                            {
                                <li class="list-group-item">
                                    <h6>Service Name: @booking.Service.ServiceName</h6>
                                    <p>
                                        Booking Date: @booking.BookingDate.Value.ToString("yyyy-MM-dd")
                                    </p>
                                    <p>Reserved Time: @booking.ReservedHours</p>
                                    <p>Number of Guests: @booking.NumOfGuest</p>

                                    <p>
                                        @if (booking.IsPaid == true)
                                        {
                                        <p>Status: Paid</p>
                                    }
                                    else
                                    {
                                        var confirmationDate = booking.ConfirmationDates.FirstOrDefault();
                                        var status = confirmationDate != null ? confirmationDate.Status : "Not Confirmed";
                                        <p>Status: @status</p>

                                        // Only check payment deadline if confirmed
                                        if (confirmationDate != null && confirmationDate.Status == "Confirmed")
                                        {
                                            var paymentDeadline = confirmationDate.CreatedAt.Value.AddHours(12);
                                            var timeRemaining = paymentDeadline - DateTime.Now;

                                            if (DateTime.Now <= paymentDeadline)
                                            {
                                                if (timeRemaining.TotalMinutes <= 10)
                                                {
                                                    <p class="text-warning">Warning: Less than 10 minutes left to complete your payment!</p>
                                                }
                                                <p class="text-warning">You have until @paymentDeadline.ToString("yyyy-MM-dd HH:mm") to complete your payment.</p>
                                            }
                                            else
                                            {
                                                <p class="text-danger">Booking is Canceled. Payment Deadline Passed.</p>
                                            }
                                        }
                                    }
                                        </p>

                                        <div id="proceedButtonContainer">
                                            <div id="proceedButtonContainer">
                                                @if (booking.IsDateAvailable) // Check if the booking date is available
                                                {
                                                    if (booking.IsPaid == false || booking.IsPaid == null)
                                                    {
                                                        <a href="@Url.Action("Payment", "Paymeant", new { bookingId = booking.ID })" class="btn btn-primary">Proceed to Payment</a>
                                                    }
                                                    else
                                                    {
                                                        <p class="text-success">Booking is Paid</p>
                                                    }
                                                }
                                                else // If the booking date is not available
                                                {
                                                    <p class="text-danger">This booking date is not available. You cannot proceed to payment.</p>// Message for unavailable bookings
                                                }
                                            </div>

                                            @if (booking.IsPaid == false || booking.IsPaid == null)
                                            {
                                                using (Html.BeginForm("DeleteBooking", "Services", FormMethod.Post, new { id = "deleteForm_" + booking.ID }))
                                                {
                                                    @Html.AntiForgeryToken()
                                                    @Html.Hidden("id", booking.ID)
                                                    <button type="button" class="btn btn-danger" onclick="confirmCancellation('deleteForm_@booking.ID')">Cancel Booking</button>
                                                }
                                            }


                                    </li>
                                }
                        </ul>
                    }
                    else
                    {
                        <p>No bookings available.</p>
                    }
                </div>





                <div class="tab-pane fade" id="profile-change-password">
                    @if (TempData["SuccessMessage"] != null)
                    {
                        <div class="alert alert-success">
                            @TempData["SuccessMessage"]
                        </div>
                    }

                    @if (ViewData.ModelState.Any(m => m.Value.Errors.Count > 0))
                    {
                        <div class="alert alert-danger">
                            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                            {
                                <div>@error.ErrorMessage</div>
                            }
                        </div>
                    }

                    @using (Html.BeginForm("ChangePassword", "LoginandSignup", FormMethod.Post, new { id = "changePasswordForm" }))
                    {
                        @Html.AntiForgeryToken()
                        <div class="form-group">
                            @Html.Label("Current Password")
                            @Html.Password("currentPassword", null, new { @class = "form-control" })
                            @Html.ValidationMessage("currentPassword")
                        </div>
                        <div class="form-group">
                            @Html.Label("New Password")
                            @Html.Password("newPassword", null, new { @class = "form-control" })
                            @Html.ValidationMessage("newPassword")
                        </div>
                        <div class="form-group">
                            @Html.Label("Confirm New Password")
                            @Html.Password("confirmPassword", null, new { @class = "form-control" })
                            @Html.ValidationMessage("confirmPassword")
                        </div>
                        <button type="submit" class="btn btn-primary">Change Password</button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


<br />
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.getElementById('changePasswordForm').addEventListener('submit', function (event) {
        event.preventDefault(); // Prevent the default form submission

        var formData = new FormData(this); // Get form data

        fetch(this.action, {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Password Changed!',
                    text: 'Your password has been successfully changed.',
                    confirmButtonText: 'Ok'
                }).then(() => {
                    window.location.href = '@Url.Action("Profile", "LoginandSignup")';
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: data.errorMessage || 'An error occurred while changing the password.',
                    confirmButtonText: 'Ok'
                });
            }
        })
        .catch(error => {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred. Please try again later.',
                confirmButtonText: 'Ok'
            });
        });
    });

    function proceedToCheckout(bookingId) {
        window.location.href = '@Url.Action("Payment", "Paymeant")/' + bookingId;
    }

    function confirmCancellation(formId) {
        Swal.fire({
            title: 'Are you sure?',
            text: "Do you really want to cancel this booking?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, cancel it!'
        }).then((result) => {
            if (result.isConfirmed) {
                document.getElementById(formId).submit();
            }
        });
    }
</script>

<script src="~/Scripts/bootstrap.bundle.min.js"></script>
