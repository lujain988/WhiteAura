@model IEnumerable<WhiteAura.Models.Testimonial>

@{
    Layout = "~/Views/Shared/_Admin.cshtml"; // Ensure you have the correct layout
    ViewBag.Title = "Get Testimonial";
}

<div class="mobile-menu-overlay"></div>

<div class="main-container">
    <div class="pd-ltr-20">
        <h1>All Testimonials</h1>

        <div class="table-container">
            <table class="table table-bordered table-hover table-responsive-sm table-sm shadow-sm" id="testimonial-table">
                <thead class="thead-light">
                    <tr>
                        <th scope="col">Name</th> <!-- Name -->
                        <th scope="col">Text</th> <!-- Text -->
                        <th scope="col">Created at</th> <!-- Created -->
                        <th scope="col">Status</th> <!-- Status -->
                        <th scope="col">Actions</th> <!-- Actions -->
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.User.FullName)</td> <!-- Display Name -->
                            <td class="wrap-text">@Html.DisplayFor(modelItem => item.Text)</td> <!-- Display Text -->
                            <td>@Html.DisplayFor(modelItem => item.CreatedAt)</td> <!-- Display Created Date -->
                            <td>
                                <select class="form-control" onchange="updateStatus('@Url.Action("UpdateStatus", "Admin")', @item.ID, this.value)">
                                    <option value="Approved" @(item.Status == "Approved" ? "selected" : (item.Status == null ? "selected" : ""))>Approved</option>
                                    <option value="Hidden" @(item.Status == "Hidden" || item.Status == null ? "selected" : "")>Hidden</option>
                                </select>
                            </td> <!-- Status Dropdown -->

                            <td>
                                <div style="display: flex; gap: 5px;">
                                    <button class="btn btn-sm btn-danger" onclick="confirmDelete('@Url.Action("DeleteTest", "Admin")', @item.ID)">Delete</button> <!-- Delete Button -->
                                </div>
                            </td> <!-- Actions -->
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- HTML for Pagination Controls -->
        <div id="pagination-container" class="d-flex justify-content-center mt-4"></div>
    </div>
</div>
<style>
    .wrap-text {
        max-width: 200px; 
        max-height: 100px; 
        overflow-y: auto; 
        overflow-x: hidden; 
        white-space: normal; 
        word-wrap: break-word; 
    }
</style>


@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/SweetAlert/1.1.3/sweetalert.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js" integrity="sha512-AA1Bzp5Q0K1KanKKmvN/4d3IRKVlv9PYgwFPvm32nPO6QS8yH1HO7LbgB1pgiOxPtfeg5zEn2ba64MUcqJx6CA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        function confirmDelete(deleteUrl, testimonialId) {
            swal({
                title: "Are you sure?",
                text: "This testimonial will be permanently deleted!",
                icon: "warning",
                buttons: {
                    cancel: "Cancel",
                    confirm: "Delete"
                },
                dangerMode: true,
            }).then((willDelete) => {
                if (willDelete) {
                    console.log(`Deleting testimonial with ID: ${testimonialId}`); // Log ID
                    $.ajax({
                        url: deleteUrl,
                        type: 'POST',
                        data: { id: testimonialId },
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() // CSRF token
                        },
                        success: function (response) {
                            console.log("Response: ", response); // Log the response for debugging
                            if (response.success) {
                                swal("Deleted!", response.message, "success").then(() => {
                                    location.reload(); // Reload the page to see changes
                                });
                            } else {
                                swal("Error!", response.message, "error");
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error("AJAX Error: ", status, error); // Log any AJAX errors
                            swal("Error!", "An error occurred while trying to delete the testimonial. " + error, "error");
                        }
                    });
                } else {
                    swal("Your testimonial is safe!");
                }
            });
        }



        function updateStatus(updateUrl, testimonialId, status) {
            $.ajax({
                url: updateUrl,
                type: 'POST',
                data: { id: testimonialId, status: status },
                success: function (response) {
                    if (response.success) {
                        swal("Status Updated!", response.message, "success");
                    } else {
                        swal("Error!", response.message, "error");
                    }
                },
                error: function () {
                    swal("Error!", "An error occurred while trying to update the status.", "error");
                }
            });
        }

        $(document).ready(function () {
            const itemsPerPage = 10; // Set how many items to show per page
            const $rows = $('#testimonial-table tbody tr');
            const totalItems = $rows.length;
            const $paginationContainer = $('#pagination-container');

            function showPage(page) {
                $rows.hide();
                const start = (page - 1) * itemsPerPage;
                const end = start + itemsPerPage;
                $rows.slice(start, end).show();

                updatePagination(page);
            }

            function updatePagination(currentPage) {
                const totalPages = Math.ceil(totalItems / itemsPerPage);
                $paginationContainer.empty();

                for (let i = 1; i <= totalPages; i++) {
                    const $link = $('<button>')
                        .text(i)
                        .addClass('page-link btn btn-outline-secondary')
                        .attr('data-page', i)
                        .prop('disabled', i === currentPage);

                    $paginationContainer.append($link);
                }
            }

            // Initial page setup
            showPage(1);

            // Pagination click event
            $paginationContainer.on('click', '.page-link', function () {
                const page = $(this).data('page');
                showPage(page);
            });
        });
    </script>
}
