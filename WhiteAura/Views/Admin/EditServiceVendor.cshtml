@model WhiteAura.Models.Service

@{
    Layout = "~/Views/Shared/_Admin.cshtml";
    ViewBag.Title = "Edit Service Vendor";
}
<br />
<br />
<div class="container">
    <h2>Edit Service Vendor</h2>

    @using (Html.BeginForm("EditServiceVendor", "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-container">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.ID)

            <div class="form-group">
                @Html.LabelFor(model => model.ServiceName, "Vendor Name", new { @class = "form-label" })
                @Html.EditorFor(model => model.ServiceName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ServiceName, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, new { @class = "form-label" })
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Price, new { @class = "form-label" })
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>

            @*<div class="form-group">
                @Html.LabelFor(model => model.CreatedAt, new { @class = "form-label" })
                @Html.EditorFor(model => model.CreatedAt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CreatedAt, "", new { @class = "text-danger" })
            </div>*@

            <div class="form-group">
                @Html.LabelFor(model => model.CategoryID, "Category", new { @class = "form-label" })
                <div class="col-md-10">
                    @Html.DropDownList("CategoryID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Image, new { @class = "form-label" })
                <input type="file" name="imageFile" class="form-control" />
                <p>Current Image: @Model.Image</p>
                @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Type, new { @class = "form-label" })
                @Html.EditorFor(model => model.Type, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.City, new { @class = "form-label" })
                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Details, new { @class = "form-label" })
                @Html.EditorFor(model => model.Details, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Details, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.NumbeOfGuests, "Number of Guests", new { @class = "form-label" })
                @Html.EditorFor(model => model.NumbeOfGuests, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NumbeOfGuests, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Location, new { @class = "form-label" })
                @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
            </div>

            @for (int i = 1; i <= 7; i++)
            {
                <div class="form-group">
                    @Html.Label("img" + i, new { @class = "form-label" })
                    <input type="file" name="imgFiles" class="form-control" />
                    @{
                        var currentImageName = Model.GetType().GetProperty("img" + i)?.GetValue(Model, null) ?? "No image uploaded";
                    }
                    <p>Current Image: @currentImageName</p>
                    @Html.ValidationMessage("img" + i, "", new { @class = "text-danger" })
                </div>
            }

            @*<div class="form-group">
                @Html.LabelFor(model => model.LocationPlace, new { @class = "form-label" })
                @Html.EditorFor(model => model.LocationPlace, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LocationPlace, "", new { @class = "text-danger" })
            </div>*@

            <div class="form-actions">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    }

    <div class="back-link">
        @Html.ActionLink("Back to List", "GetVendros", new { area = "" }, new { @class = "btn btn-secondary" })
    </div>
</div>

<style>
    body {
        font-family: 'Lato', sans-serif;
        margin: 0;
        padding: 0;
    }

    .container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 15px;
    }

    h2 {
        font-size: 26px;
        margin: 20px 0;
        text-align: center;
    }

    .form-container {
        background-color: #ffffff;
        box-shadow: 0px 0px 9px 0px rgba(0, 0, 0, 0.1);
        border-radius: 3px;
        padding: 25px;
        margin-bottom: 25px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-label {
        display: block;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    .btn {
        display: inline-block;
        padding: 10px 20px;
        font-size: 16px;
        font-weight: bold;
        text-align: center;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .btn-primary {
        background-color: #007bff;
        color: #ffffff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .btn-secondary {
        background-color: #6c757d;
        color: #ffffff;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

    .back-link {
        text-align: center;
        margin-top: 20px;
    }

    .form-control {
        height: calc(1.5em + 1.75rem + 2px);
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js" integrity="sha512-AA1Bzp5Q0K1KanKKmvN/4d3IRKVlv9PYgwFPvm32nPO6QS8yH1HO7LbgB1pgiOxPtfeg5zEn2ba64MUcqJx6CA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
@section Scripts {
    <script>
    $(document).ready(function () {
        $('form').submit(function (e) {
            e.preventDefault(); // Prevent default form submission

            var formData = new FormData(this); // Create FormData object to handle file uploads
            $.ajax({
                url: $(this).attr('action'),
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false,
                success: function (response) {
                    if (response.success) {
                        swal({
                            title: "Success!",
                            text: response.message,
                            icon: "success",
                            button: "OK"
                        }).then(() => {
                            window.location.href = '@Url.Action("GetVendros", "Admin")'; // Redirect to GetVendros
                        });
                    } else {
                        swal({
                            title: "Error!",
                            text: response.message,
                            icon: "error",
                            button: "OK"
                        });
                    }
                },
                error: function () {
                    swal({
                        title: "Error!",
                        text: "An unexpected error occurred.",
                        icon: "error",
                        button: "OK"
                    });
                }
            });
        });
    });
    </script>
}

